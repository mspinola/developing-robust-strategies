{************************************************************

PC_MA2wtRPT_VF Robert Pardo
(C) Copyright 11/2016 Robert Pardo All Rights Reserved
Trading Logic - Enter on close when MA1 X MA2
Non-reversing - Go flat on opposite signal
MA LBs - Fast 5 * 20 / Intermediate 10 & 40 / Slow 20 & 80
MA_LB Scan Ranges -
Fast 1 -10 @ 1 X 10 - 30 @ 2
Inter 5 - 15 @ 1 X 30 - 50 @ 2
Slow 10 - 30 @ 2 X 60 - 120 @ 5
Latest Revision 01/24/2017

*************************************************************}

Inputs:        MA1per(5),
                   MA2per(20),
                   Risk_On(0),
                   RSpct(.25),
                   Trail_On(0),
                   TSpct(.5),
                   Target_On(0),
                   TApct(0),
                   VF_Filter_Type(0),
                   VF_Thresh(0),
                   VF_LB(0),
                   Ent_Filter(1),
                   Ent_Value(.25),
                   EF_LB(5);

Vars: x(0),
    MA1Val(0),
    MA2Val(0),
    Go_Long(0),
    Go_Short(0),
    Trade_On(0),
    LOentry(0),
    LOexit(0),
    LOrisk(0),
    LOtarg(0),
    LOtrail(0),
    LOtrail_temp(0),
    SHentry(0),
    SHexit(0),
    SHrisk(0),
    SHtarg(0),
    SHtrail(0),
    SHtrail_temp(0),
    MktPos(0),
    Vol_Value(0),
    RVol_Value(0),
    ENF_Value(0);


//Begin main trading loop
IF currentbar > MA2per + 1 then BEGIN

//Set flags to zero
          GO_Long = 0;
          GO_Short = 0;
          Trade_On = 0;

//Record Market position
   MktPos  = MarketPosition;

//Calculate entry filter
ENF_Value = MinMove;
if Ent_Filter = 1 then begin
     ENF_Value = Average(TrueRange,EF_LB) * Ent_Value;
End;

//Calculate Volatility Channel
    Vol_Value = Average(TrueRange,VF_LB);
         RVol_Value  = ( highest(high,VF_LB) - lowest(low,VF_LB) ) / Vol_Value;


//Calculate MA
    MA1Val = average(close,MA1per);
    MA2Val = average(close,MA2per);

// Calculate Signals
if MA1Val[0] > MA2Val[0] and MA1Val[1] < MA2Val[1] then GO_Long = 1;
if MA1Val[0] < MA2Val[0] and MA1Val[1] > MA2Val[1] then GO_Short = 1;
//if GO_long = 1 then print(date,"  GoL: ",GO_Long);
//if GO_Short = 1 then print(date,"  GoS: ",GO_Short);
//Evaluate Volatility Conditions
    If VF_Filter_Type = 0 Then Begin
        Trade_On = 1;
    end;

   If VF_Filter_Type = 1 Then Begin
      If TrueRange <= Vol_Value * VF_Thresh Then Begin
         Trade_On = 1;
      end;
   end;

   If VF_Filter_Type = 2 Then Begin
      If TrueRange > Vol_Value * VF_Thresh Then Begin
         Trade_On = 1;
      end;
   end;

          If VF_Filter_Type = 3 Then Begin
       If RVol_Value <=  VF_Thresh Then Begin
          Trade_On = 1;
       end;
    end;

    If VF_Filter_Type = 4 Then Begin
       If  RVol_Value >  VF_Thresh Then Begin
          Trade_On = 1;
       end;
    end;

//Set Orders for new long
if MktPos[1] <= 0 and MktPos[0] = 1 then begin
          LOtarg = entryprice * ( 1 + ( TApct / 100 ) );
          LOrisk = entryprice * ( 1 - ( RSpct / 100 ) );
          LOtrail = entryprice * ( 1 - ( TSpct / 100 ) );
end;

//Update Trailing Stop
if MktPos[0] = 1 then begin
          LOtrail_temp = close * ( 1 - ( TSpct / 100 ) );
          If LOtrail_temp > LOtrail then LOtrail = LOtrail_temp;
end;

//Set Orders for new short
if MktPos[1] >= 0 and MktPos[0] = -1 then begin
          SHtarg = entryprice * ( 1 - ( TApct / 100 ) );
          SHrisk = entryprice * (1 + ( RSpct / 100 ) );
          SHtrail = entryprice * (1 + ( TSpct / 100 ) );
end;

//Update Trailing Stop
if MktPos[0] = -1 then begin
          SHtrail_temp = close + (1 * ( TSpct / 100 ) );
          If SHtrail_temp < SHtrail then SHtrail = SHtrail_temp;
end;

//print(date,"  TrO: ",Trade_On," Pos: ",MktPos," GOL: ",GO_Long);

//Set Buy Signal when flat
If Trade_On = 1 Then begin
// print(date," IN LoTO")         ;
//Set Buy Signal when flat
If MktPos = 0 then begin
          If GO_Long = 1 then begin
                   Buy ("LOen") this Bar close;
          end;
End;

//Set Long Exit and Reverse when Long
If MktPos = 1 then begin
          If GO_Short = 1 then begin
                   Sell ("LOexit") this Bar close;
          end;
end;

End; //End Trade On Long orders

//Set Long Exit orders
If MktPos = 1 Then begin

//Set Risk Exit when Long
If Risk_On = 1 then begin
          Sell ("LOrisk") Next Bar LOrisk stop;
end;

//Set Profit Exit when Long
If Trail_On = 1 then begin
          Sell ("LOtrail") Next Bar LOtrail stop;
end;

//Set Target Exit when Long
If Target_On = 1 then begin
          Sell ("LOtarg") Next Bar LOtarg limit;
end;

End; //End Long Exit orders

//print(date,"  TrO: ",Trade_On," Pos: ",MktPos," GOL: ",GO_Short);
//Set Sell Signal when flat

If  Trade_On = 1 Then begin
//print(date," IN ShTO")          ;
//print(date,"  TrO: ",Trade_On," Pos: ",MktPos," GOS: ",GO_Short);
//Set Sell Signal when flat
If MktPos = 0 then begin
          If GO_Short = 1 then begin
          //print(date,"  TrO: ",Trade_On," Pos: ",MktPos," GOS: ",GO_Short);
                   SellShort ("SHen") this Bar close;
          end;
end;

//Set Short Exit and Reverse when Short
If MktPos = -1 then begin
          If GO_Long = 1 then begin
          //print(date,"  TrO: ",Trade_On," Pos: ",MktPos," GOL: ",GO_Long);
                   Buy to Cover ("SHexit") this Bar close;
          end;
end;

End; //End Trade On Short Orders

//Set Short Exit orders
If MktPos = -1 Then begin

//Set Risk Exit when Short
If Risk_On = 1 then begin
          Buy to Cover ("SHrisk") Next Bar SHrisk stop;
end;

//Set Profit Exit when Short
If Trail_On = 1 then begin
          Buy to Cover ("SHtrail") Next Bar SHtrail stop;
end;

//Set Target Exit when Short
If Target_On = 1 then begin
          Buy to Cover ("SHtarg") Next Bar SHtarg limit;
end;

end; //End Short Exit Orders
//End of Short Entry and Exit block

END;          //End main loop
